import os
import pandas as pd
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from openai.error import RateLimitError
from tenacity import (
    retry, stop_after_attempt, wait_exponential,
    retry_if_exception_type
)
from langchain_community.utilities import SQLDatabase
from langchain_experimental.sql import SQLDatabaseChain
from langchain_openai import ChatOpenAI

# Load environment variables
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Prepare SQLite and DataFrame
DB_PATH = "data/df_total.db"
engine = create_engine(f"sqlite:///{DB_PATH}", echo=False)
df = pd.read_csv("data/df_total.csv")
df.to_sql("df_total", con=engine, index=False, if_exists="replace")

# Wrap database
db = SQLDatabase.from_uri(f"sqlite:///{DB_PATH}")

# Primary LLM (premium)
llm_primary = ChatOpenAI(
    model="gpt-4o-mini",
    temperature=0,
    openai_api_key=OPENAI_API_KEY
)

# Fallback LLM (cheaper)
llm_fallback = ChatOpenAI(
    model="gpt-3.5-turbo",
    temperature=0,
    openai_api_key=OPENAI_API_KEY
)

# Build two chains
chain_primary = SQLDatabaseChain.from_llm(llm_primary, db, verbose=True)
chain_fallback = SQLDatabaseChain.from_llm(llm_fallback, db, verbose=False)

# Retry decorator: up to 3 attempts with 1s→2s→4s backoff
@retry(
    retry=retry_if_exception_type(RateLimitError),
    wait=wait_exponential(multiplier=1, max=4),
    stop=stop_after_attempt(3),
)
def invoke_chain(chain, query: str) -> str:
    resp = chain.invoke({"query": query})
    return resp.get("result", "").strip()

def handle_query(user_query: str) -> str:
    # Bypass for simple row-count questions
    q = user_query.lower()
    if any(kw in q for kw in ["how many rows", "row count", "number of rows"]):
        try:
            cnt = engine.connect().execute(text("SELECT COUNT(*) FROM df_total")).scalar()
            return f"There are {cnt} rows in the dataset."
        except Exception as e:
            return f"Error counting rows: {e}"

    # Otherwise, try premium chain first
    try:
        return invoke_chain(chain_primary, user_query)
    except RateLimitError:
        # After retries, switch to fallback chain
        try:
            return invoke_chain(chain_fallback, user_query)
        except RateLimitError:
            return (
                "⚠️ OpenAI quota exhausted on both models. "
                "Please check your billing/plan or try again later."
            )
    except Exception as e:
        return f"An unexpected error occurred: {e}"
